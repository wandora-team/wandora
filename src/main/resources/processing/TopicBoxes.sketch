/*
 * WANDORA
 * http://wandora.org
 * 
 * Copyright (C) 2004-2016 Wandora Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * TopicBoxes.sketch
 */

package processing;

import org.wandora.application.gui.topicpanels.processing.*;
import org.wandora.topicmap.*;
import processing.core.*;
import java.util.*;

public class TopicBoxes extends SketchTemplate {

	
	String[] data;
	Topic newTopic;
	Topic currentTopic;
	String currentTopicName;
	ArrayList boxes;
	TopicBox topicBox = null;
	int rootColor = 0xFFFFFFFF;
	int typeColor = 0xFFCCCCCC;
	int playerColor = 0xFFFFFFFF;
	int mouseOverColor = 0xFF999999;
	int boxLineColor = 0xFF666666;
	
	static final int MODE_WAIT = 1;
	static final int MODE_OUT = 2;
	static final int MODE_IN = 3;
	int mode = MODE_IN;
	
	int offsetX = 0;
	int targetX = 0;
	
	public void setup() {
	  size(720, 576);
	  frameRate(25);
	  smooth();
	  textAlign(CENTER,CENTER);
	  PFont topicFont = createFont("Arial", 10);
	  textFont(topicFont);
	  cursor(HAND);
	  currentTopic = getCurrentTopic();
	  initializeBoxes();
	}
	
	
	public void initializeBoxes() {
	  currentTopicName = TopicTools.getTopicName(currentTopic);
	  data = TopicTools.getAssociationsAsTypePlayerTuples(currentTopic);
	  boxes = buildBoxes(data, 0, 0, 719, 575);
	}
	
	
	public void draw() {
	  background(255);
	  switch(mode) {
	    case MODE_IN: {
	      if(offsetX < 1) {
	        mode = MODE_WAIT;
	      }
	      break;
	    }
	    case MODE_OUT: {
	      if(offsetX < -790) {
	        offsetX = 800;
	        tweenTo(0);
	        currentTopic = newTopic;
	        initializeBoxes();
	        mode = MODE_IN;
	      }
	      break;
	    }
	  }
	  for(Object b : boxes) {
	    topicBox = (TopicBox) b;
	    topicBox.draw(offsetX);
	  }
	  tween();
	}
	
	
	public void mouseReleased() {
	  for(Object b : boxes) {
	    topicBox = (TopicBox) b;
	    if(topicBox.mouseInside(offsetX)) {
	      try {
	        Topic t = getTopicMap().getTopicWithBaseName(topicBox.name);
	        if(t != null) {
	          newTopic = t;
	          tweenTo(-800);
	          mode = MODE_OUT;
	        }
	      }
	      catch(Exception e) {}
	    }
	  }
	}
	
	
	public void tweenTo(int tx) {
	  targetX = tx;
	}
	
	
	public void tween() {
	  if(offsetX != targetX) {
	    offsetX = (int) (offsetX + ((targetX - offsetX) / 4) - 1);
	  }
	}
	
	
	public ArrayList buildBoxes(String[] data, int x, int y, int w, int h) {
	  ArrayList boxes = new ArrayList();
	  
	  HashMap<String,ArrayList> typedData = new HashMap();
	  for(int i=0; i<data.length; i=i+2) {
	    String type = data[i];
	    String topic = data[i+1];
	    ArrayList<String> typed = typedData.get(type);
	    if(typed == null) {
	      typed = new ArrayList();
	    }
	    typed.add(topic);
	    typedData.put(type, typed);
	  }
	  
	  int pst = 0;
	  int ts = typedData.size();
	  for(String type : typedData.keySet()) {
	    ArrayList players = typedData.get(type);
	    int ps = players.size();
	    pst += ps;
	  }
	  int ph = h/pst;
	  
	  int tx = x+w/3;
	  int tw = w/3;
	  int ty = y;
	  for(String type : typedData.keySet()) {
	    ArrayList players = typedData.get(type);
	    int ps = players.size();
	    int th = ps*ph;
	    int j=0;
	    int px = x+w/3+w/3;
	    int pw = w/3;
	    for(Object player : players) {
	      int py = ty+j*ph;
	      boxes.add(new TopicBox(player.toString(), px, py, pw, ph, playerColor));
	      j++;
	    }
	    boxes.add(new TopicBox(type.toString(), tx, ty, tw, th, typeColor));
	    ty += j*ph;
	  }
	  boxes.add(new TopicBox(currentTopicName, x, y, w/3, ph*pst, rootColor));
	  return boxes;
	}
	
	
	public class TopicBox {
	  int x, y, w, h;
	  String name = "";
	  int bg = 0xFFFFFF;
	  
	  TopicBox(String n, int x, int y, int w, int h, int bg) {
	    this.name = n;
	    this.x = x;
	    this.y = y;
	    this.w = w;
	    this.h = h;
	    this.bg = bg;
	  }
	
	  void draw() {
	    draw(0);
	  }
	  void draw(int xoffset) {
	    fill(bg);
	    if(mouseInside(xoffset)) {
	      fill(mouseOverColor);
	    }
	    stroke(boxLineColor);
	    rect(x+xoffset, y, w, h);
	    fill(0);
	    text(name, x+xoffset, y, w, h);
	  }
	  
	  boolean mouseInside() {
	    return mouseInside(0);
	  }
	  
	  boolean mouseInside(int xoffset) {
	    if(mouseX > x+xoffset && mouseX < x+xoffset+w && mouseY > y && mouseY < y+h) {
	      return true;
	    }
	    return false;
	  }
	}
}
