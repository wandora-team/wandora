/*
 * WANDORA
 * http://wandora.org
 * 
 * Copyright (C) 2004-2016 Wandora Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * Euclidean3D.sketch
 */

package processing;

import org.wandora.application.gui.topicpanels.processing.*;
import org.wandora.topicmap.*;
import org.wandora.application.gui.topicpanels.graph3d.*;
import org.wandora.utils.Tuples;
import processing.core.*;
import java.util.*;
import java.awt.Color;
import java.awt.event.MouseWheelListener;
import java.awt.event.MouseWheelEvent;
import controlP5.*;

public class Euclidean3D extends ThreeDSketchTemplate {

    private org.wandora.application.gui.topicpanels.graph3d.World world;

    // Having invert==true will cause dark graphics to be drawn on white background
    // instead of light graphics on black background.
    private boolean invert=false;
	
    private int stageWidth = 920;
    private int stageHeight = 640;
	
    private int[][] mousePos=new int[5][]; { for(int i=0;i<mousePos.length;i++) mousePos[i]=new int[]{0,0}; }
    private int mousePosPtr=0;
    
    private boolean isMousePressed=false;
    private int startMouseX=0;
    private int startMouseY=0;
    private float[] startRotation=null;
    private Vector3 rotationAxis=null;
    private double rotationInertia=0.0;	

    private ThreeDObject hoverObject=null;

    private AbstractNode dragNode;
    private Vector3 dragStartPos;

    private ControlP5 controlP5;
    private PGraphics cp5buf;
    private TopicHashMap<Boolean> selectedTypes=new TopicHashMap<Boolean>();
    private TopicHashMap<Boolean> selectedATypes=new TopicHashMap<Boolean>();
    private CheckBox typesCheck; // really a check box container for all type check boxes
    private CheckBox typesACheck; 
    

    private TopicHashMap<AbstractNode> openedTopics=new TopicHashMap<AbstractNode>();

    private TopicHashMap<AbstractNode> topicNodes=new TopicHashMap<AbstractNode>();

    private HashMap<Object,Edge>associationEdges=new HashMap<Object,Edge>();
    private HashMap<Tuples.T2,Edge>filteredEdges=new HashMap<Tuples.T2,Edge>();
	
    private float scale=1.0f;
    private float[] inverseMatrix=new float[] {1,0,0,0,
                                               0,1,0,0,
                                               0,0,1,0};
    private float[] rotationMatrix=new float[]{1,0,0,0,
                                               0,1,0,0,
                                               0,0,1,0};
    private float viewScale=0.7f;
    
    public void updateTypeSelection() throws TopicMapException {
        // topic types
        CheckBox newTypesCheck=controlP5.addCheckBox("typesCheck",20,20);
        newTypesCheck.setSize(14,14);
        
        TopicHashMap<Boolean> old=new TopicHashMap<Boolean>();
        for( Map.Entry<Topic,Boolean> e : selectedTypes.entrySet() ) {
            old.put(e.getKey(),typesCheck.getState("T"+e.getKey().getBaseName()));
        }
        
        TopicHashMap<Boolean> newTypes=new TopicHashMap<Boolean>();
        for(Topic t : topicNodes.keySet()){
            for(Topic type : t.getTypes()){
                if(!newTypes.containsKey(type)){
                    Boolean b=old.get(type);
                    if(b==null) b=Boolean.TRUE;
                    newTypes.put(type,b);
                }
            }
        }
        
        Collection<Topic> order=TMBox.sortTopics(newTypes.keySet(),null);
        
        int counter=0;
        for(Topic t : order){
            Boolean b=newTypes.get(t);
            String bn=t.getBaseName();
            newTypesCheck.addItem("T"+bn,0.0f);
            Toggle label=newTypesCheck.getItem(counter);
            label.setColorCaptionLabel(invert?0xff000000:0xffffffff);
            label.setLabel(bn);
            if(b) newTypesCheck.toggle("T"+bn);
            counter++;
        }
        if(typesCheck!=null) typesCheck.remove();
        typesCheck=newTypesCheck;
        selectedTypes=newTypes;
        
        // association types
        newTypesCheck=controlP5.addCheckBox("associationTypesCheck",stageWidth-220,20);
        newTypesCheck.setSize(14,14);
        boolean instancesSelected=true;
        if(typesACheck!=null) instancesSelected=typesACheck.getState("I");
        old=new TopicHashMap<Boolean>();
        for( Map.Entry<Topic,Boolean> e : selectedATypes.entrySet() ) {
            old.put(e.getKey(),typesACheck.getState("A"+e.getKey().getBaseName()));
        }
        
        newTypes=new TopicHashMap<Boolean>();
        for(Object o : associationEdges.keySet()){
            if(o instanceof Association) {
                Association a=(Association)o;
                Topic type=a.getType();
                if(!newTypes.containsKey(type)){
                    Boolean b=old.get(type);
                    if(b==null) b=Boolean.TRUE;
                    newTypes.put(type,b);
                }
            }
            else if(o instanceof InstanceAssociation) {
            }
        }
        order=TMBox.sortTopics(newTypes.keySet(),null);
     
        counter=0;
        
        {
	        newTypesCheck.addItem("I",0.0f);
	        Toggle label=newTypesCheck.getItem(counter);
	        label.setColorCaptionLabel(invert?0xff000000:0xffffffff);
	        label.setLabel("Instances");
	        if(instancesSelected) newTypesCheck.toggle("I");
	        counter++;
        }
        
        for(Topic t : order){
            Boolean b=newTypes.get(t);
            String bn=t.getBaseName();
            newTypesCheck.addItem("A"+bn,0.0f);
            Toggle label=newTypesCheck.getItem(counter);
            label.setColorCaptionLabel(invert?0xff000000:0xffffffff);
            label.setLabel(bn);
            if(b) newTypesCheck.toggle("A"+bn);
            counter++;
        }
        if(typesACheck!=null) typesACheck.remove();
        typesACheck=newTypesCheck;
        selectedATypes=newTypes;
           
    }
    
    public Color getTopicColor(Topic t) throws TopicMapException {
        String bn=t.getBaseName();
        if(bn==null) bn=t.getOneSubjectIdentifier().toString();
        int hash=bn.hashCode();
        int h=(hash&0xff);
        int s=255; //((hash>>8)&0x80);
        int v=255; //255-((hash>>16)&0x80);
        return Color.getHSBColor(h/255.0f,s/255.0f,v/255.0f);
    }
    
    public void associationTypesCheck(int a){
        try{
            filtersChanged();
        }catch(TopicMapException tme){tme.printStackTrace();}
    }
    
    public void typesCheck(int a){
        try{
            filtersChanged();
        }catch(TopicMapException tme){tme.printStackTrace();}
    }
    
    public void filtersChanged() throws TopicMapException {
        for(Map.Entry<Topic,AbstractNode> e : topicNodes.entrySet()){
            e.getValue().setVisible(filterTopic(e.getKey()));
        }
        
        for(Map.Entry<Object,Edge> e : associationEdges.entrySet()){
            e.getValue().setVisible(filterAssociation(e.getValue().getEdgeObject()));
        }
    }
    
    public boolean filterAssociation(Object o) throws TopicMapException {
        if(o instanceof Association){
            Association a=(Association)o;
            Topic type=a.getType();
            if(selectedATypes.containsKey(type)){
                if(typesACheck.getState("A"+type.getBaseName())) return true;
            }
            else return true;
        }
        else if(o instanceof InstanceAssociation){
            if(typesACheck!=null) return typesACheck.getState("I");
            else return true;
        }
        else return true;
        
        return false;
    }
    
    public boolean filterTopic(Topic t) throws TopicMapException {
        if(t.getTypes().isEmpty()) return true;
        for(Topic type : t.getTypes()){
            if(selectedTypes.containsKey(type)) {
                if(typesCheck.getState("T"+type.getBaseName())) return true;
            }
            else return true;
        }
        return false;
    }

	public AbstractNode addTopic(Topic t) throws TopicMapException {
	    return addTopic(t,null);
	}
	    
	public AbstractNode addTopic(Topic t,Node near) throws TopicMapException {
	    AbstractNode node=topicNodes.get(t);
	    if(node!=null) return node;
	    
	    node=(AbstractNode)world.addNode(t);
        if(!t.getTypes().isEmpty()){
            node.setColor(getTopicColor(t.getTypes().iterator().next()));
        }
//        if(invert) node.setColor(java.awt.Color.BLACK);
        Vector3 p=new Vector3(Math.random()*2.0-1.0,Math.random()*2.0-1.0,Math.random()*2.0-1.0);
        p=p.normalize();
        node.setPos(p);
	    
        ThreeDNode node3d=new ThreeDNode(node);
        addObject(node3d);
	    
	    if(near!=null){
	        Vector3 pos=near.getPos();
	        Vector3 r=new Vector3(-1.0+Math.random()*2.0,-1.0+Math.random()*2.0,-1.0+Math.random()*2.0);
	        r=pos.add(pos.cross(r).normalize().mul(0.2)).normalize();
	        node.setPos(r);
	    }
	    else {
	        Vector3 pos=new Vector3(-1.0+Math.random()*2.0,-1.0+Math.random()*2.0,-1.0+Math.random()*2.0);
	        pos=pos.normalize();
	        node.setPos(pos);
	    }
	    
	    topicNodes.put(t,node);
	    
	    return node;
	}
    
    public Edge addInstanceAssociation(Topic cls,Topic instance) throws TopicMapException {
        InstanceAssociation ia=new InstanceAssociation(cls,instance);
        Edge edge=associationEdges.get(ia);
        if(edge!=null) return edge;
        
        Node node1=addTopic(cls);
        Node node2=addTopic(instance);
        edge=(Edge)world.addEdge(node1,node2);
        edge.setEdgeObject(ia);
        edge.setColor(new Color(0xc0c0c0));
        edge.setVisible(filterAssociation(ia));
        associationEdges.put(ia,edge);
        return edge;
    }
    
    public Edge addAssociation(Association a) throws TopicMapException {
        Edge edge=associationEdges.get(a);
        if(edge!=null) return edge;
        
        if(a.getRoles().size()==2){
            Iterator<Topic> ri=a.getRoles().iterator();
            Node node1=addTopic(a.getPlayer(ri.next()));
            Node node2=addTopic(a.getPlayer(ri.next()));
            if(node1==null || node2==null || node1==node2) return null;
            edge=(Edge)world.addEdge(node1,node2);
            edge.setEdgeObject(a);
            edge.setColor(getTopicColor(a.getType()));
            edge.setVisible(filterAssociation(a));
            associationEdges.put(a,edge);
            return edge;
        }
        else {
            // todo
            return null;
        }
        
    }
    
    public void removeEdge(Edge edge) throws TopicMapException {
        Object o=edge.getEdgeObject();
        associationEdges.remove(o);
        if(o instanceof Association){
            Association a=(Association)o;
            for(Topic r : a.getRoles()){
                openedTopics.remove(a.getPlayer(r));
            }
        }
        else if(o instanceof InstanceAssociation){
            InstanceAssociation ia=(InstanceAssociation)o;
            openedTopics.remove(ia.cls);
            openedTopics.remove(ia.instance);
        }
    }
    
    public void removeThreeDObject(Node node){
        for(int i=0;i<objects.size();i++){
            Object o=objects.get(i);
            if(o instanceof ThreeDNode ) {
                if(((ThreeDNode)o).n==node) {
                    objects.remove(i);
                    return;
                }
            }
        }
    }
    
    public void removeNode(Node node) throws TopicMapException {
        ArrayList<Edge> removeEdges=new ArrayList<Edge>();
        
        for(Edge e : associationEdges.values()){
            if(e.getNode1()==node || e.getNode2()==node) removeEdges.add(e);
        }
        
        for(Edge e : removeEdges){
            removeEdge(e);
        }
        
        Topic t=(Topic)node.getNodeObject();
        
        topicNodes.remove(t);
        world.removeNode(node);
        removeThreeDObject(node);
    }
    
    public void closeTopic(Topic t) throws TopicMapException {
        Node node=topicNodes.get(t);
        if(node==null) return;
        removeNode(node);
    }

	public void openTopic(Topic t) throws TopicMapException {
	    openTopic(t,0);
	}
	
	public void openTopic(Topic t,int recursive) throws TopicMapException {
	    if(openedTopics.containsKey(t)) return;
	    
	    AbstractNode node=addTopic(t);
	    openedTopics.put(t,node);
	    
	    for(Association a : t.getAssociations()){
            addAssociation(a);
            // todo recursive
	    }

        Color instanceColor=invert?new Color(0xb88b00):new Color(0xffc820);

        for(Topic it : t.getTopicMap().getTopicsOfType(t) ){
            if(!it.mergesWithTopic(t)) {
                addInstanceAssociation(t,it);
                if(recursive>0) openTopic(it,recursive-1);
            }
        }

        for(Topic tt : t.getTypes() ){
            if(!tt.mergesWithTopic(t)) {
                addInstanceAssociation(tt,t);
                if(recursive>0) openTopic(tt,recursive-1);
            }
        }
	    
        updateTypeSelection();
	}
	
	public void setTopic(Topic topic){
	    try{
	        addTopic(topic);
	        openTopic(topic);
	    }
	    catch(TopicMapException tme){
	        tme.printStackTrace();
	    }
	}
	
    boolean shiftDown=false;
    public void keyPressed(){
        if(keyCode==SHIFT) shiftDown=true;
    }
    
    public void keyReleased(){
        if(keyCode==SHIFT) shiftDown=false;
    }

    public long pressTime=0;
    public int clickCount=0;
    public boolean shiftClick=false;
	
	public void mousePressed(){
        long t=System.currentTimeMillis();
        if(t-pressTime>500) clickCount=0;
        clickCount++;
        pressTime=t;
    
	    startMouseX=mouseX;
	    startMouseY=mouseY;
	    isMousePressed=true;
        shiftClick=shiftDown;

        if(hoverObject!=null){
            dragNode=((ThreeDNode)hoverObject).n;
            dragStartPos=dragNode.getPos();
            dragNode.setPinned(true);
        }
        else {
            startRotation=rotationMatrix;
        }
	}
	
	public void mouseReleased(){
        long t=System.currentTimeMillis();
        if(t-pressTime>500) clickCount=1;
        
        if(dragNode!=null){
            dragNode.setPinned(false);
            if(clickCount==2){
	            Object o=dragNode.getNodeObject();
	            if(o instanceof Topic) {
	                try{
	                    if(shiftDown) closeTopic((Topic)o);
	                    else openTopic((Topic)o);
	                }catch(TopicMapException tme){
	                    tme.printStackTrace();
	                }
	            }
            }
        }
        else {
            if(!shiftClick){
                int oldPtr=((mousePosPtr-3+mousePos.length)%mousePos.length);
	           Vector3 z=new Vector3(0,0,1);
	           Vector3 d=new Vector3(mouseX-mousePos[oldPtr][0],mouseY-mousePos[oldPtr][1],0).mul(1.0/3.0);
	           rotationAxis=z.cross(d).normalize();
	           rotationInertia=d.length()/200.0;
            }
        }
    
	    isMousePressed=false;
        dragNode=null;
	}

    public Vector3 screenPos(Vector3 pos){
        Vector3 r=vectorRotate(pos,rotationMatrix);
        double fov = PI/3.0;
        double cameraZ = 1.0 / Math.tan(fov/2.0) *stageHeight /2.0; // / viewScale;
        double ax=Math.atan2(r.x,cameraZ-r.z);
        double ay=Math.atan2(r.y,cameraZ-r.z);
        double sx=ax*stageHeight/fov;
        double sy=ay*stageHeight/fov;
        return new Vector3(sx,sy,cameraZ-r.z);
    }
    
	
	public void mouseDragged(){
	    if(isMousePressed){
            if(dragNode!=null){
                Vector3 mouseD=new Vector3(mouseX-startMouseX,mouseY-startMouseY,0);
                Vector3 t=vectorTransform(dragStartPos,rotationMatrix);
                
                double fov = PI/3.0;
                double cameraZ = 1.0 / Math.tan(fov/2.0) * stageHeight / 2.0;
                double z=cameraZ-t.z;
                mouseD=mouseD.mul(z/cameraZ);
                
                dragNode.setPos( vectorTransform(t.add(mouseD),inverseMatrix) );
            }
            else {
                if(shiftClick){
                    rotationMatrix=matrixMultiply(
                        new float[]{1,0,0,mouseX-startMouseX,
                                    0,1,0,mouseY-startMouseY,
                                    0,0,1,0},
                        startRotation
                    );
                    inverseMatrix=invertMatrix(rotationMatrix);
	        	    startMouseX=mouseX;
	        	    startMouseY=mouseY;
                    startRotation=rotationMatrix;
                }
                else {
	                Vector3 z=new Vector3(0,0,1);
	                Vector3 d=new Vector3(mouseX-startMouseX,mouseY-startMouseY,0);
	                Vector3 axis=z.cross(d).normalize();
	                double angle=d.length()/200.0;
	                
	                rotationMatrix=matrixMultiply(
	                    axisAngleMatrix(axis,angle),
	                    startRotation
	                );
	                inverseMatrix=invertMatrix(rotationMatrix);
	                
	        	    startMouseX=mouseX;
	        	    startMouseY=mouseY;
	                startRotation=rotationMatrix;
                }
            }
	    }
	}

    public void mouseWheel(int rotation){
        rotationMatrix=matrixMultiply(
            new float[]{1,0,0,0,
                        0,1,0,0,
                        0,0,1,-50*rotation},
            rotationMatrix
        );
        inverseMatrix=invertMatrix(rotationMatrix);
        startRotation=rotationMatrix;
    }

    public float shade(Vector3 v){
        return shade((float)v.x,(float)v.y,(float)v.z);
    }

	public float shade(float x,float y,float z){
	    float rz=zPos(x,y,z,rotationMatrix);
	    rz=(float)Math.max(Math.min(scale+rz,2.0*scale),0.0)/(2f*scale);
        if(invert) return (1.0f-rz)*0.8f;
        else return 0.2f+rz*0.8f;
	}
	
	public void shadedLine(float x1,float y1,float z1,float x2,float y2,float z2,int r,int g,int b){
	    float xm=(x1+x2)/2f;
	    float ym=(y1+y2)/2f;
	    float zm=(z1+z2)/2f;
	    float rz=shade(xm,ym,zm);
	    
        if(invert){
            r=(int)min(255,r+255*rz);
            g=(int)min(255,g+255*rz);
            b=(int)min(255,b+255*rz);
        }
        else{
	       r=(int)(r*rz);
	       g=(int)(g*rz);
	       b=(int)(b*rz);
        }
	    
	    stroke(r,g,b);
	    line(x1,y1,z1,x2,y2,z2);
	}
	
    public void setupGUI(){
        controlP5=new ControlP5(this);
        controlP5.setControlFont(createFont("SansSerif.plain",10));
        cp5buf=createGraphics(stageWidth,stageHeight,JAVA2D);
    }
    
	private PFont font;
	public void setup(){    
	    size(stageWidth,stageHeight,P3D);
	    
        font=createFont("SansSerif.plain",18);
        textMode(SCREEN);

        addMouseWheelListener(new MouseWheelListener(){
            public void mouseWheelMoved(MouseWheelEvent e){
                mouseWheel(e.getWheelRotation());
            }
        });

        setupGUI();

	    world=new EuclideanWorld();
	    topicNodes.clear();
	    openedTopics.clear();
	    associationEdges.clear();
	    
        world.setProperty("edgeLength",10.0);
        world.setProperty("repelForce",0.01);
        world.setProperty("edgeForce",0.01);
	
	    scale=(float)(viewScale*stageHeight/2.0);
	    rotationMatrix=new float[]{scale,0,0,0,
                                   0,scale,0,0,
                                   0,0,scale,0};
        inverseMatrix=invertMatrix(rotationMatrix);

	//    world.makeRandomWorld(40,60);
	    Topic t=getCurrentTopic();
	    setTopic(t);
	
	    frameRate(20);
	    smooth();
	    
	    lights();
	    
	}

	public void draw(){
        drawGUI();
    
        mousePos[mousePosPtr][0]=mouseX;
        mousePos[mousePosPtr][1]=mouseY;
        mousePosPtr=((mousePosPtr+1)%mousePos.length);
    
        if(!mousePressed && rotationAxis!=null){
            rotationMatrix=matrixMultiply(
                axisAngleMatrix(rotationAxis,rotationInertia),
                rotationMatrix
            );
            inverseMatrix=invertMatrix(rotationMatrix);
            rotationInertia*=0.85;
            if(rotationInertia<0.001){
                rotationAxis=null;
            }
        }
    
        pushMatrix();
    
	    if(hoverObject==null) world.simulate(0.02);
	    
	    background(invert?255:0);
	    
	    translate(stageWidth/2,stageHeight/2);

        applyMatrix(g,rotationMatrix);
		
//	    float s=(float)(viewScale*stageHeight/2.0);
//	    scale(s);

        hoverObject=findObject();
        if(hoverObject!=null && hoverObject instanceof ThreeDNode){
            Node hoverNode=((ThreeDNode)hoverObject).n;
            Vector3 hoverPos=hoverNode.getPos();
        }

        drawObjects();
	    
	    strokeWeight(2);
	    for(Edge e : world.getEdges()){
            Node n1=e.getNode1();
            Node n2=e.getNode2();
            if(!n1.isVisible() || !n2.isVisible() || !e.isVisible()) continue;
            
            float s1=shade(n1.getPos());
            float s2=shade(n2.getPos());
            
	        Vector3[] line;
            if(s1==s2) line=new Vector3[]{n1.getPos(),n2.getPos()};
            else line=e.line3(0.1);
            
	        for(int i=1;i<line.length;i++){
		        Vector3 v1=line[i-1];
		        Vector3 v2=line[i];
                Color c=e.getColor();
		        shadedLine((float)v1.x,(float)v1.y,(float)v1.z,(float)v2.x,(float)v2.y,(float)v2.z,c.getRed(),c.getGreen(),c.getBlue());
	        }
	    }

        popMatrix();
        pushMatrix();
        if(hoverObject!=null && hoverObject instanceof ThreeDNode) {
            Node hoverNode=((ThreeDNode)hoverObject).n;
            
            Object o=hoverNode.getNodeObject();
            if(o instanceof Topic){
                Topic t=(Topic)o;
                String basename=null;
                try{
                    basename=t.getBaseName();
                }catch(TopicMapException tme){tme.printStackTrace();}
                
                if(basename!=null){
                    
		            Vector3 pos=hoverNode.getPos();
                    pos=screenPos(pos);
                    
                    textFont(font);
                    textAlign(CENTER,BOTTOM);
                    fill(invert?0xff000000:0xffffffff);
                    text(basename+"\n",(float)(pos.x+stageWidth/2.0),(float)(pos.y+stageHeight/2.0));

                }
            }
        }
        popMatrix();
     
        copyGUI();
	}

    public void drawGUI(){
        // This draws ControlP5 GUI in offscreen, alpha bacuground, image and on srceen.
        // Then the screen is cleared with norma background and 3d is drawn on it.
        // Finally copyGUI copies the offscreen image on screen over the 3d
        beginRecord(cp5buf);
        background(0,0,0,0);
        controlP5.draw();
        endRecord();
    }
    
    public void copyGUI(){
        image(cp5buf,0,0);
    }

    private static class InstanceAssociation {
        public Topic cls;
        public Topic instance;
        public InstanceAssociation(Topic cls,Topic instance){
            this.cls=cls;
            this.instance=instance;
        }
        public int hashCode(){
            return cls.hashCode()+instance.hashCode();
        }
        public boolean equals(Object o){
            if(o.getClass()!=InstanceAssociation.class) return false;
            InstanceAssociation ia=(InstanceAssociation)o;
            return ia.cls.equals(cls) && ia.instance.equals(instance);
        }
    }

    private class ThreeDNode implements ThreeDObject {
        public AbstractNode n;
        
        public ThreeDNode(AbstractNode n){
            this.n=n;
        }
        
        public void draw(PGraphics g,Integer colour){
	        Vector3 pos=n.getPos();
	        g.pushMatrix();
	        g.translate((float)pos.x,(float)pos.y,(float)pos.z);
	        
            if(colour==null){
        	   g.strokeWeight(1);
        	   g.stroke(invert?255:0);
	           float shade=shade((float)pos.x,(float)pos.y,(float)pos.z);
               int r,gr,b;
               
	           java.awt.Color c=n.getColor();
               if(this==hoverObject) c=java.awt.Color.RED;
               
               if(invert){
                   r=(int)min(c.getRed()+shade*255,255);
                   gr=(int)min(c.getGreen()+shade*255,255);
                   b=(int)min(c.getBlue()+shade*255,255);
               }
               else {
                   r=(int)(shade*c.getRed());
                   gr=(int)(shade*c.getGreen());
                   b=(int)(shade*c.getBlue());
               }
               
	           g.fill(r,gr,b);

            }
            else {
                g.noStroke();
                g.fill(colour);
            }
	        
	        float latitude=(float)Math.atan2(pos.y,Math.sqrt(pos.z*pos.z+pos.x*pos.x));
	        float longitude=(float)Math.atan2(pos.x,-pos.z);
	        
	        g.rotateY(-longitude);
	        g.rotateX(latitude);
	        
	        float height=(float)n.getSize();
	        
	        g.translate(0.0f,0.0f,-0.05f*height/2f);
	        g.box(0.05f,0.05f,0.05f*height);
	        
	        g.popMatrix();            
        }
        
        public void draw(PGraphics g){
            draw(g,null);
        }
        
        public void drawBuffer(PGraphics g,int colour){
            draw(g,colour);
        }
        
        public boolean isVisible(){
            return n.isVisible();
        }
    }
}